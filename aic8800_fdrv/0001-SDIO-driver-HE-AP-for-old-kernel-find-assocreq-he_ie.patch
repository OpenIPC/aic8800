From c36df2b7a69050b77791f5f159024ea85179d7c1 Mon Sep 17 00:00:00 2001
From: haixinyu <haixinyu@aicsemi.com>
Date: Fri, 24 Jun 2022 16:07:01 +0800
Subject: [PATCH] [SDIO/driver] HE AP for old kernel & find assocreq he_ie

---
 .../driver/aic8800/aic8800_fdrv/lmac_mac.h    | 37 +++++++++++++
 .../driver/aic8800/aic8800_fdrv/rwnx_defs.h   | 14 +++++
 .../driver/aic8800/aic8800_fdrv/rwnx_main.c   |  3 ++
 .../driver/aic8800/aic8800_fdrv/rwnx_msg_tx.c | 48 ++++++++++++++---
 .../driver/aic8800/aic8800_fdrv/rwnx_rx.c     | 54 +++++++++++++++++++
 .../driver/aic8800/aic8800_fdrv/rwnx_rx.h     | 22 ++++++++
 6 files changed, 171 insertions(+), 7 deletions(-)

diff --git a/SDIO/driver_fw/driver/aic8800/aic8800_fdrv/lmac_mac.h b/SDIO/driver_fw/driver/aic8800/aic8800_fdrv/lmac_mac.h
index 7c21f91..b269b3f 100644
--- a/SDIO/driver_fw/driver/aic8800/aic8800_fdrv/lmac_mac.h
+++ b/SDIO/driver_fw/driver/aic8800/aic8800_fdrv/lmac_mac.h
@@ -465,6 +465,43 @@ enum mac_connection_flags {
 
 #define IEEE80211_HE_PPE_THRES_MAX_LEN		25
 
+#define WLAN_EID_EXTENSION  255
+/* Element ID Extensions for Element ID 255 */
+enum ieee80211_eid_ext {
+	WLAN_EID_EXT_ASSOC_DELAY_INFO = 1,
+	WLAN_EID_EXT_FILS_REQ_PARAMS = 2,
+	WLAN_EID_EXT_FILS_KEY_CONFIRM = 3,
+	WLAN_EID_EXT_FILS_SESSION = 4,
+	WLAN_EID_EXT_FILS_HLP_CONTAINER = 5,
+	WLAN_EID_EXT_FILS_IP_ADDR_ASSIGN = 6,
+	WLAN_EID_EXT_KEY_DELIVERY = 7,
+	WLAN_EID_EXT_FILS_WRAPPED_DATA = 8,
+	WLAN_EID_EXT_FILS_PUBLIC_KEY = 12,
+	WLAN_EID_EXT_FILS_NONCE = 13,
+	WLAN_EID_EXT_FUTURE_CHAN_GUIDANCE = 14,
+	WLAN_EID_EXT_HE_CAPABILITY = 35,
+	WLAN_EID_EXT_HE_OPERATION = 36,
+	WLAN_EID_EXT_UORA = 37,
+	WLAN_EID_EXT_HE_MU_EDCA = 38,
+	WLAN_EID_EXT_HE_SPR = 39,
+	WLAN_EID_EXT_NDP_FEEDBACK_REPORT_PARAMSET = 41,
+	WLAN_EID_EXT_BSS_COLOR_CHG_ANN = 42,
+	WLAN_EID_EXT_QUIET_TIME_PERIOD_SETUP = 43,
+	WLAN_EID_EXT_ESS_REPORT = 45,
+	WLAN_EID_EXT_OPS = 46,
+	WLAN_EID_EXT_HE_BSS_LOAD = 47,
+	WLAN_EID_EXT_MAX_CHANNEL_SWITCH_TIME = 52,
+	WLAN_EID_EXT_MULTIPLE_BSSID_CONFIGURATION = 55,
+	WLAN_EID_EXT_NON_INHERITANCE = 56,
+	WLAN_EID_EXT_KNOWN_BSSID = 57,
+	WLAN_EID_EXT_SHORT_SSID_LIST = 58,
+	WLAN_EID_EXT_HE_6GHZ_CAPA = 59,
+	WLAN_EID_EXT_UL_MU_POWER_CAPA = 60,
+	WLAN_EID_EXT_EHT_OPERATION = 106,
+	WLAN_EID_EXT_EHT_MULTI_LINK = 107,
+	WLAN_EID_EXT_EHT_CAPABILITY = 108,
+};
+
 #if LINUX_VERSION_CODE >= KERNEL_VERSION(4, 19, 0)
 #include <linux/ieee80211.h>
 #else
diff --git a/SDIO/driver_fw/driver/aic8800/aic8800_fdrv/rwnx_defs.h b/SDIO/driver_fw/driver/aic8800/aic8800_fdrv/rwnx_defs.h
index a94b464..55bbf60 100644
--- a/SDIO/driver_fw/driver/aic8800/aic8800_fdrv/rwnx_defs.h
+++ b/SDIO/driver_fw/driver/aic8800/aic8800_fdrv/rwnx_defs.h
@@ -211,6 +211,9 @@ struct rwnx_vif {
 			struct list_head sta_list; /* List of STA connected to the AP */
 			struct rwnx_bcn bcn;       /* beacon */
 			u8 bcmc_index;             /* Index of the BCMC sta to use */
+#ifdef CONFIG_HE_FOR_OLD_KERNEL
+			u8 aic_index;
+#endif
 			struct rwnx_csa *csa;
 
 			struct list_head mpath_list; /* List of Mesh Paths used on this interface */
@@ -276,6 +279,14 @@ struct rwnx_sta_stats {
 	struct rwnx_rx_rate_stats rx_rate;
 };
 
+#ifdef CONFIG_HE_FOR_OLD_KERNEL
+struct aic_sta {
+    u8 sta_idx;             /* Identifier of the station */
+	bool he;               /* Flag indicating if the station
+                               supports HE */
+};
+#endif
+
 /*
  * Structure used to save information relative to the managed stations.
  */
@@ -435,6 +446,9 @@ struct rwnx_hw {
 	struct list_head vifs;
 	struct rwnx_vif *vif_table[NX_VIRT_DEV_MAX + NX_REMOTE_STA_MAX]; /* indexed with fw id */
 	struct rwnx_sta sta_table[NX_REMOTE_STA_MAX + NX_VIRT_DEV_MAX];
+#ifdef CONFIG_HE_FOR_OLD_KERNEL
+	struct aic_sta aic_table[NX_REMOTE_STA_MAX + NX_VIRT_DEV_MAX];
+#endif
 	struct rwnx_survey_info survey[SCAN_CHANNEL_MAX];
 	struct cfg80211_scan_request *scan_request;
 	struct rwnx_chanctx chanctx_table[NX_CHAN_CTXT_CNT];
diff --git a/SDIO/driver_fw/driver/aic8800/aic8800_fdrv/rwnx_main.c b/SDIO/driver_fw/driver/aic8800/aic8800_fdrv/rwnx_main.c
index 0bd2530..deb2ba3 100644
--- a/SDIO/driver_fw/driver/aic8800/aic8800_fdrv/rwnx_main.c
+++ b/SDIO/driver_fw/driver/aic8800/aic8800_fdrv/rwnx_main.c
@@ -3462,6 +3462,9 @@ static int rwnx_cfg80211_start_ap(struct wiphy *wiphy, struct net_device *dev,
 		u8 txq_status = 0;
 		rwnx_vif->ap.bcmc_index = apm_start_cfm.bcmc_idx;
 		rwnx_vif->ap.flags = 0;
+#ifdef CONFIG_HE_FOR_OLD_KERNEL
+		rwnx_vif->ap.aic_index = 0;
+#endif
 		sta = &rwnx_hw->sta_table[apm_start_cfm.bcmc_idx];
 		sta->valid = true;
 		sta->aid = 0;
diff --git a/SDIO/driver_fw/driver/aic8800/aic8800_fdrv/rwnx_msg_tx.c b/SDIO/driver_fw/driver/aic8800/aic8800_fdrv/rwnx_msg_tx.c
index 9bc2100..84d1ead 100755
--- a/SDIO/driver_fw/driver/aic8800/aic8800_fdrv/rwnx_msg_tx.c
+++ b/SDIO/driver_fw/driver/aic8800/aic8800_fdrv/rwnx_msg_tx.c
@@ -1343,14 +1343,27 @@ int rwnx_send_me_sta_add(struct rwnx_hw *rwnx_hw, struct station_parameters *par
 	struct me_sta_add_req *req;
 	u8 *ht_mcs = (u8 *)&params->ht_capa->mcs;
 	int i;
-
+	struct rwnx_vif *rwnx_vif = rwnx_hw->vif_table[inst_nbr];
+#ifdef CONFIG_HE_FOR_OLD_KERNEL
+	struct aic_sta *sta = &rwnx_hw->aic_table[rwnx_vif->ap.aic_index];
+#endif
 	RWNX_DBG(RWNX_FN_ENTRY_STR);
 
-	/* Build the MM_STA_ADD_REQ message */
-	req = rwnx_msg_zalloc(ME_STA_ADD_REQ, TASK_ME, DRV_TASK_ID,
-								  sizeof(struct me_sta_add_req));
-	if (!req)
-		return -ENOMEM;
+#ifdef CONFIG_HE_FOR_OLD_KERNEL
+		printk("ASSOC ME idx %d, he %d\n ", rwnx_vif->ap.aic_index, sta->he);
+		if (rwnx_vif->ap.aic_index < NX_REMOTE_STA_MAX + NX_VIRT_DEV_MAX){
+			rwnx_vif->ap.aic_index++;
+			}
+		else{
+			rwnx_vif->ap.aic_index = 0;
+			}
+#endif
+
+    /* Build the MM_STA_ADD_REQ message */
+    req = rwnx_msg_zalloc(ME_STA_ADD_REQ, TASK_ME, DRV_TASK_ID,
+                                  sizeof(struct me_sta_add_req));
+    if (!req)
+        return -ENOMEM;
 
 	/* Set parameters for the MM_STA_ADD_REQ message */
 	memcpy(&(req->mac_addr.array[0]), mac, ETH_ALEN);
@@ -1404,6 +1417,27 @@ int rwnx_send_me_sta_add(struct rwnx_hw *rwnx_hw, struct station_parameters *par
 		req->he_cap.mcs_supp.rx_mcs_80p80 = mcs_nss_supp->rx_mcs_80p80;
 		req->he_cap.mcs_supp.tx_mcs_80p80 = mcs_nss_supp->tx_mcs_80p80;
 	}
+#else
+	#ifdef CONFIG_HE_FOR_OLD_KERNEL
+	if (sta->he) {
+		const struct ieee80211_he_cap_elem *he_capa = &rwnx_he_capa.he_cap.he_cap_elem;
+		struct ieee80211_he_mcs_nss_supp *mcs_nss_supp =
+								(struct ieee80211_he_mcs_nss_supp *)(he_capa + 1);
+		req->flags |= STA_HE_CAPA;
+		for (i = 0; i < ARRAY_SIZE(he_capa->mac_cap_info); i++) {
+			req->he_cap.mac_cap_info[i] = he_capa->mac_cap_info[i];
+		}
+		for (i = 0; i < ARRAY_SIZE(he_capa->phy_cap_info); i++) {
+			req->he_cap.phy_cap_info[i] = he_capa->phy_cap_info[i];
+		}
+		req->he_cap.mcs_supp.rx_mcs_80 = mcs_nss_supp->rx_mcs_80;
+		req->he_cap.mcs_supp.tx_mcs_80 = mcs_nss_supp->tx_mcs_80;
+		req->he_cap.mcs_supp.rx_mcs_160 = mcs_nss_supp->rx_mcs_160;
+		req->he_cap.mcs_supp.tx_mcs_160 = mcs_nss_supp->tx_mcs_160;
+		req->he_cap.mcs_supp.rx_mcs_80p80 = mcs_nss_supp->rx_mcs_80p80;
+		req->he_cap.mcs_supp.tx_mcs_80p80 = mcs_nss_supp->tx_mcs_80p80;
+    }
+	#endif
 #endif
 
 	if (params->sta_flags_set & BIT(NL80211_STA_FLAG_WME))
@@ -1425,7 +1459,7 @@ int rwnx_send_me_sta_add(struct rwnx_hw *rwnx_hw, struct station_parameters *par
 	req->vif_idx = inst_nbr;
 
 	if (params->sta_flags_set & BIT(NL80211_STA_FLAG_TDLS_PEER)) {
-		struct rwnx_vif *rwnx_vif = rwnx_hw->vif_table[inst_nbr];
+        //struct rwnx_vif *rwnx_vif = rwnx_hw->vif_table[inst_nbr];
 		req->tdls_sta = true;
 		if ((params->ext_capab[3] & WLAN_EXT_CAPA4_TDLS_CHAN_SWITCH) &&
 			!rwnx_vif->tdls_chsw_prohibited)
diff --git a/SDIO/driver_fw/driver/aic8800/aic8800_fdrv/rwnx_rx.c b/SDIO/driver_fw/driver/aic8800/aic8800_fdrv/rwnx_rx.c
index 5e97ba9..3b73bf3 100644
--- a/SDIO/driver_fw/driver/aic8800/aic8800_fdrv/rwnx_rx.c
+++ b/SDIO/driver_fw/driver/aic8800/aic8800_fdrv/rwnx_rx.c
@@ -543,6 +543,39 @@ static bool rwnx_rx_data_skb(struct rwnx_hw *rwnx_hw, struct rwnx_vif *rwnx_vif,
 	return forward;
 }
 
+#ifdef CONFIG_HE_FOR_OLD_KERNEL
+#if (LINUX_VERSION_CODE < KERNEL_VERSION(4, 9, 0))
+const u8 *cfg80211_find_ie_match(u8 eid, const u8 *ies, int len,
+				 const u8 *match, int match_len,
+				 int match_offset)
+{
+	const struct element *elem;
+
+	/* match_offset can't be smaller than 2, unless match_len is
+	 * zero, in which case match_offset must be zero as well.
+	 */
+	if (WARN_ON((match_len && match_offset < 2) ||
+		    (!match_len && match_offset)))
+		return NULL;
+
+	for_each_element_id(elem, eid, ies, len) {
+		if (elem->datalen >= match_offset - 2 + match_len &&
+		    !memcmp(elem->data + match_offset - 2, match, match_len))
+			return (void *)elem;
+	}
+
+	return NULL;
+}
+#endif
+static inline const u8 *cfg80211_find_ext_ie(u8 ext_eid, const u8* ies, int len)
+{
+        return cfg80211_find_ie_match(WLAN_EID_EXTENSION, ies, len,
+                                                        &ext_eid, 1, 2);
+}
+
+#endif
+
+
 /**
  * rwnx_rx_mgmt - Process one 802.11 management frame
  *
@@ -560,6 +593,27 @@ static void rwnx_rx_mgmt(struct rwnx_hw *rwnx_hw, struct rwnx_vif *rwnx_vif,
 	struct rx_vector_1 *rxvect = &hw_rxhdr->hwvect.rx_vect1;
 
 	//printk("rwnx_rx_mgmt\n");
+
+#ifdef CONFIG_HE_FOR_OLD_KERNEL
+	struct ieee80211_he_cap_elem *he;
+	struct aic_sta *sta = &rwnx_hw->aic_table[rwnx_vif->ap.aic_index];
+	const u8* ie;
+	u32 len;
+    if (ieee80211_is_assoc_req(mgmt->frame_control) && rwnx_vif->wdev.iftype == NL80211_IFTYPE_AP) {
+    printk("ASSOC_REQ: sta_idx %d MAC %pM\n", rwnx_vif->ap.aic_index, mgmt->sa);
+	sta->sta_idx = rwnx_vif->ap.aic_index;
+	len = skb->len - (mgmt->u.assoc_req.variable - skb->data);
+	ie = cfg80211_find_ext_ie(WLAN_EID_EXT_HE_CAPABILITY, mgmt->u.assoc_req.variable, len);
+		if(ie && ie[1] >= sizeof(*he) + 1){
+			printk("ASSOC_REQ: HE STA\n");
+			sta->he = true;
+			}
+		else{
+			sta->he = false;
+			}
+    }
+#endif
+
 	if (ieee80211_is_mgmt(mgmt->frame_control) &&
 	    (skb->len <= 24 || skb->len > 768)) {
 	    printk("mgmt err\n");
diff --git a/SDIO/driver_fw/driver/aic8800/aic8800_fdrv/rwnx_rx.h b/SDIO/driver_fw/driver/aic8800/aic8800_fdrv/rwnx_rx.h
index 2b98799..a068083 100644
--- a/SDIO/driver_fw/driver/aic8800/aic8800_fdrv/rwnx_rx.h
+++ b/SDIO/driver_fw/driver/aic8800/aic8800_fdrv/rwnx_rx.h
@@ -365,4 +365,26 @@ void reord_timeout_handler (struct timer_list *t);
 
 #endif
 
+#ifdef CONFIG_HE_FOR_OLD_KERNEL
+#if LINUX_VERSION_CODE < KERNEL_VERSION(4, 4, 197)
+struct element {
+    u8 id;
+    u8 datalen;
+    u8 data[];
+};
+/* element iteration helpers */
+#define for_each_element(_elem, _data, _datalen)			\
+	for (_elem = (const struct element *)(_data);			\
+	     (const u8 *)(_data) + (_datalen) - (const u8 *)_elem >=	\
+		(int)sizeof(*_elem) &&					\
+	     (const u8 *)(_data) + (_datalen) - (const u8 *)_elem >=	\
+		(int)sizeof(*_elem) + _elem->datalen;			\
+	     _elem = (const struct element *)(_elem->data + _elem->datalen))
+
+#define for_each_element_id(element, _id, data, datalen)		\
+	for_each_element(element, data, datalen)			\
+		if (element->id == (_id))
+#endif
+#endif
+
 #endif /* _RWNX_RX_H_ */
-- 
2.31.1

